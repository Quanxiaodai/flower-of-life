<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width">
    <title>Canvas Playground - Flower of Life - mrkiffie.com</title>

    <style>
        body{
            color:#444;
            margin: 0 auto;
            font-family: sans-serif;
            font-size: 100%;
            position: relative;
        }
        #canvas{
            display: block;
            margin: 2em auto 0;
            cursor: pointer;
            outline: none;
        }
        a{
            color: #444;
            text-decoration: none;
            outline: none;
        }
        .menu{
            padding: 0;
            position: relative;
            background: #eee;
            border-bottom: .2em inset #ddd;
        }
        .open{
            display: block;
            padding: 1em;
        }
        .close{
            position: absolute;
            display: none;
            bottom: 0;
            left: 0;
            right: 0;
            height: 1em;
            padding: 1em;
            z-index: 1;
            text-align: right;
        }
        #options{
            max-height: 0;
            overflow: hidden;
            -webkit-transition: max-height 0.4s ease-out;
            -moz-transition: max-height 0.4s ease-out;
            -ms-transition: max-height 0.4s ease-out;
            -o-transition: max-height 0.4s ease-out;
            transition: max-height 0.4s ease-out;
        }
        #options:target{
            max-height: 25em;
        }
        #options:target .close{
            display: block;
        }
        .close span{
            position: absolute;
            bottom: 1em;
            right: 1em;
            display: inline-block;
            border-radius: 50%;
            padding: .5em;
            line-height: .5;
            text-align: center;
        }
        .close span:hover,
        .close span:focus,
        .close span:active{
            background: rgba(200,200,200,.6);
        }
        .option-group{
            display: block;
            position: relative;
        }
        label{
            display: inline-block;
            background: rgba(200,200,200,.6);
            padding: .5em .8em .5em .4em;
            margin: .5em;
            cursor: pointer;
            border-radius: .3em;
            color: #444;
        }
        .no-select{
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }
        small{
            font-size: 70%;
            float:right;
            padding: 1em;
        }

    </style>

</head>
<body id="top">

    <div class="menu">
        <div id="options" >
            <label class="no-select">
                <input name="randomizeColors" type="checkbox">
                Randomize Hue
            </label>
            <label class="no-select">
                <input name="randomizeRotation" type="checkbox">
                Randomize Rotation
            </label>
            <label class="no-select">
                <input name="renderStyle" type="radio" value="1">
                Filled Circles
            </label>
            <label class="no-select">
                <input name="renderStyle" type="radio" value="0" checked="checked">
                Outline Circles
            </label>
            <a href="#top" class="no-select close"><span>&times;</span></a>
        </div>
        <a href="#options" class="no-select open">Options</a>
    </div>

    <canvas id="canvas" width="600" height="600" class="no-select">
        Ummm. Your browser doesn't support canvas :(
    </canvas>

    <script>
        var randomizeColors = false;
        var randomizeRotation = false;
        var renderStyle = 0;
        var lineWidth = 3;

        /* We need to convert degrees to radians because that is what
         * Math.sin() accepts. A radian is the angle generated in an
         * arc where the radius and the arc have the same length.
         * To calculate the circumference of of a circle, one uses the
         * formula:
         *
         *   circumference = 2 * PI * r
         *
         * Thus radians as a ratio to degrees can be expressed as:
         *
         *     360 degree = 2 * PI radian
         *     180 degree = PI radian
         *       1 degree = PI/180 radian
         *
         * or the reverse ratio 1 radian = 180/PI deg
         *
         */
        function degToRad( deg ){
            return ( deg * Math.PI / 180 );
        }

        /**
         * This just returns a random integer within the specified range
         */
        function randomInt( min, max ) {
            return Math.floor( Math.random() * ( max - min + 1 ) + min );
        }

        /**
         * Returns a color
         */
        function randomColor(){
            var hue = randomizeColors ? randomInt( 0, 360 ) : 250 ;
            return 'hsla(' + hue + ', 80%, 50%, .4)'
        }

        /**
         * Returns the line's width
         * @todo expose in options
         */
        function getLineWidth(){
            return lineWidth;
        }

        /**
         * Render the according to the style
         */
        function doRender(){
            if ( renderStyle == 1 ){
                context.fill();
            } else {
                context.stroke();
            }
        }

        /**
         * This creates the circles on the the canvas
         */
        function doCircle( x, y, r ){
            context.beginPath();
            context.arc( x, y, r, 0, degToRad( 360 ), false );
            context.fillStyle = randomColor();
            context.lineWidth = getLineWidth();
            context.strokeStyle = randomColor();

            doRender();

        }

        var c = document.getElementById( 'canvas' );
        var context = c.getContext( '2d' );

        /**
         * Executes a sequence of functions to render the pattern
         */
        function doPattern(){
            var w = c.width;
            var h = c.height;
            var x = w / 2; // half the canvas's width - center x
            var y = h / 2; // half the canvas's height - center y
            var r = ( x > y ? y : x ) / 2 - lineWidth; // set the radius to half the smallest dimension of the canvas
            var a = randomizeRotation ? randomInt( 0, 360 ) : 30;  // rotational offset in degrees

            // first clear canvas
            context.clearRect( 0, 0, w, h );

            // center circle
            doCircle( x, y, r );

            for (var i = 0; i < 6 ; i++ ){
                doCircle(
                    ( x + r * Math.sin( degToRad( i * 60 + a ) ) ),
                    ( y + r * Math.cos( degToRad( i * 60 + a ) ) ),
                    r
                );
            }
        }

        /**
         * adding event listener to recreate the pattern on touch start and mousedown
         */
        c.addEventListener( 'mousedown', doPattern, false );
        c.addEventListener( 'touchstart', doPattern, false );

        /**
         * Adjust the canvas' size relative to the window's dimensino
         */
        function adjustCanvasDimensions(){
            var w = window.innerWidth;
            var h = window.innerHeight;

            c.width = w *.8;
            c.height = h *.8;

            doPattern();
        }

        /**
         * Register canvas resizing event listener
         */
        window.addEventListener('resize', adjustCanvasDimensions, false);

        /**
         * Modifies the Option properties
         */
        function getOptions(e){
            if (e.target && e.target.name){
                var name = e.target.name;
                if (e.target.type === 'checkbox'){
                    window[name] = e.target.checked;
                }
                if (e.target.type === 'radio'){
                    window[name] = e.target.value;
                }
                doPattern();
            }
        }

        /**
         * add event listener to the Options container
         */
        (document.getElementById('options'))
            .addEventListener('click', getOptions, false );

        /**
         * Initial call to adjust canvas dimensions and render the pattern
         */
        adjustCanvasDimensions();

    </script>

    <small class="no-select">v0.2 Oct 2013 by mrkiffie</small>

</body>
</html>
