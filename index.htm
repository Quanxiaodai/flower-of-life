<!doctype html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width">
    <title>Canvas Playground - Flower of Life - mrkiffie.com</title>

    <style>
        body{
            color:#444;
            margin: 0 auto;
            font-family: sans-serif;
            font-size: 100%;
            position: relative;
        }
        canvas{
            display: block;
            margin: 2em auto 0;
            cursor: pointer;
            outline: none;
        }
        a{
            color: #444;
            text-decoration: none;
            outline: none;
        }
        .menu{
            padding: 0;
            position: relative;
            background: #eee;
            border-bottom: .2em inset #ddd;
        }
        .open{
            display: block;
            padding: 1em;
        }
        .close{
            position: absolute;
            display: none;
            bottom: 0;
            left: 0;
            right: 0;
            height: 1em;
            padding: 1em;
            z-index: 1;
            text-align: right;
        }
        #options{
            max-height: 0;
            overflow: hidden;
            -webkit-transition: max-height 0.4s ease-out;
            -moz-transition: max-height 0.4s ease-out;
            -ms-transition: max-height 0.4s ease-out;
            -o-transition: max-height 0.4s ease-out;
            transition: max-height 0.4s ease-out;
        }
        #options.expanded{
            max-height: 25em;
        }
        .close span{
            position: absolute;
            bottom: 1em;
            right: 1em;
            display: inline-block;
            border-radius: 50%;
            padding: .5em;
            line-height: .5;
            text-align: center;
        }
        .close span:hover,
        .close span:focus,
        .close span:active{
            background: rgba(200,200,200,.6);
        }
        .option-group{
            display: block;
            position: relative;
        }
        label{
            display: inline-block;
            background: rgba(200,200,200,.6);
            padding: .5em .8em .5em .4em;
            margin: .5em;
            cursor: pointer;
            border-radius: .3em;
            color: #444;
        }
        .no-select{
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
        }
        small{
            font-size: 70%;
            float:right;
            padding: 1em;
        }

    </style>

</head>
<body id="top">

    <div class="menu">
        <div id="options" >
            <label class="no-select">
                <input name="randomizeColors" type="checkbox">
                Randomize Hue
            </label>
            <label class="no-select">
                <input name="randomizeRotation" type="checkbox">
                Randomize Rotation
            </label>
            <label class="no-select">
                <input name="renderStyle" type="radio" value="1">
                Filled Circles
            </label>
            <label class="no-select">
                <input name="renderStyle" type="radio" value="0" checked="checked">
                Outline Circles
            </label>
            <label class="no-select">
                Line Width
                <input name="lineWidth" type="number" value="5" min="3" max="550" interval="5">
            </label>

        </div>
        <button id="menuButton" tabindex="1" class="no-select open">Options</button>
    </div>

    <canvas id="flower-of-life" width="600" height="600" class="no-select">
        Ummm. Your browser doesn't support canvas :(
    </canvas>

    <script>
    (function(window, document, undefined){
        var _F_={
            settings : {
                hue : 250,
                lineWidth : 5,
                randomizeColors : false,
                randomizeRotation : false,
                renderStyle : 0
            }
        };

        _F_.optionsPanel = document.getElementById('options');
        _F_.menuButton = document.getElementById('menuButton');
        _F_.canvas = document.getElementById( 'flower-of-life' )
        _F_.context = _F_.canvas.getContext( '2d' );


        /**
         * Utility function to get a particular setting
         * @param string - refering to the property to retrieve
         * @return string/undefined - returns value if requested property exists, returns undefined if it doesn't
         */
        _F_.get = function ( prop ){
            if ( _F_.settings.hasOwnProperty(prop)){
                return _F_.settings[prop];
            } else {
                return undefined;
            }
        }


        /**
         * Utility function to set a particular setting. Any value, except undefined, is permitted to be assigned to a property
         * @param string - refering to the property to set
         * @param string - contains the value to be assigned to the property
         * @return bool/undefined - returns true if requested property exists, returns undefined if either the prperty doesn't exist or if the value is undefined.
         */
        _F_.set = function ( prop, value ){
            if ( value !== undefined && _F_.settings.hasOwnProperty(prop)){
                _F_.settings[prop] = value;
                return true;
            } else {
                return undefined;
            }
        }

        /**
         * Utitlity function that handles form elements and assigns them to the appropriate properties
         * @param object - event information
         */
        _F_.formHandler = function ( event ){
            if (event.target && event.target.name){
                if (event.target.type === 'checkbox'){
                    _F_.set( event.target.name, event.target.checked );
                } else if (event.target.type === 'radio'){
                    _F_.set( event.target.name, event.target.value );
                } else if (event.target.type === 'number'){
                    _F_.set( event.target.name, event.target.value );
                } else if (event.target.type === 'text'){
                    _F_.set( event.target.name, event.target.value );
                }

                // @todo - figure out how to add event listener
                _F_.drawPattern();

            }
        }




        /** We need to convert degrees to radians because that is what
         * Math.sin() accepts. A radian is the angle generated in an
         * arc where the radius and the arc have the same length.
         * To calculate the circumference of of a circle, one uses the
         * formula:
         *
         *   circumference = 2 * PI * r
         *
         * Thus radians as a ratio to degrees can be expressed as:
         *
         *     360 degree = 2 * PI radian
         *     180 degree = PI radian
         *       1 degree = PI/180 radian
         *
         * or the reverse ratio 1 radian = 180/PI deg
         *
         * @param float - degrees to convert to radians
         * @return float - radian value
         */
        _F_.degToRad = function ( deg ){
            return ( deg * Math.PI / 180 );
        }

        /**
         * This just returns a random integer within the specified range
         */
        _F_.randomInt = function ( min, max ) {
            return Math.floor( Math.random() * ( max - min + 1 ) + min );
        }

        /**
         * Returns a color
         */
        _F_.randomColor = function (){
            var hue = _F_.get('randomizeColors') ? _F_.randomInt( 0, 360 ) : 250 ;
            return 'hsla(' + hue + ', 80%, 50%, .4)'
        }


        /**
         * Render the according to the style
         */
        _F_.render = function (){
            if ( _F_.get('renderStyle') === '1' ){
                _F_.context.fill();
            } else {
                _F_.context.stroke();
            }
        }

        /**
         * This creates the circles on the the canvas
         */
        _F_.doCircle = function ( x, y, r ){
            _F_.context.beginPath();
            _F_.context.arc( x, y, ( r > 0 ? r : 1 ) , 0, _F_.degToRad( 360 ), false );
            _F_.context.fillStyle = _F_.randomColor();
            _F_.context.lineWidth = _F_.get('lineWidth');
            _F_.context.strokeStyle = _F_.randomColor();

            _F_.render();

        }

        /**
         * Executes a sequence of functions to render the pattern
         */
        _F_.drawPattern = function (){
            var w = _F_.canvas.width;
            var h = _F_.canvas.height;
            var x = w / 2; // half the canvas's width - center x
            var y = h / 2; // half the canvas's height - center y
            var r = ( x > y ? y : x ) / 4; //- _F_.get('lineWidth') / 2; // set the radius to half the smallest dimension of the canvas minus half the lineWidth
            var a = _F_.get('randomizeRotation') ? _F_.randomInt( 0, 360 ) : 30;  // rotational offset in degrees

            // first clear canvas
            _F_.context.clearRect( 0, 0, w, h );

            // center circle
            _F_.doCircle( x, y, r );

            for (var i = 0; i < 6 ; i++ ){
                _F_.doCircle(
                    ( x + r * Math.sin( _F_.degToRad( i * 60 + a ) ) ),
                    ( y + r * Math.cos( _F_.degToRad( i * 60 + a ) ) ),
                    r
                );
            }
            return false;
        }


        /**
         * Adjust the canvas' size relative to the window's dimensino
         */
        _F_.adjustCanvasDimensions = function (){
            var w = window.innerWidth;
            var h = window.innerHeight;

            _F_.canvas.width = w *.8;
            _F_.canvas.height = h *.8;

            _F_.drawPattern();
        }


        /**
         * Toggle the menu for quicker feedback
         */
        _F_.toggleMenu = function (){
            _F_.optionsPanel.classList.toggle('expanded');
        }



    /** EVENT LISTENERS **/

        /**
         * adding event listener to recreate the pattern on touch start and mousedown
         */
        _F_.canvas.addEventListener( 'mousedown', _F_.drawPattern, false );


        /**
         * Register canvas resizing event listener
         */
        window
            .addEventListener('resize', _F_.adjustCanvasDimensions, false);

        /**
         * add event listener to the Options container
         */
        _F_.optionsPanel
            .addEventListener('change', _F_.formHandler, false );

        _F_.menuButton
            .addEventListener('click', _F_.toggleMenu, false )

        window
            .addEventListener('formHandler', _F_.drawPattern, false );

        /**
         * Initialize _F_
         */
        _F_.init = function (){
            _F_.adjustCanvasDimensions();

        }
        _F_.init();

    })( window, document );

    </script>

    <small class="no-select">v0.3 Oct 2013 by mrkiffie</small>

</body>
</html>
